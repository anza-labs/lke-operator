// Code generated by gowrap. DO NOT EDIT.
// template: ../../../hack/templates/opentelemetry.go.tpl
// gowrap: http://github.com/hexdigest/gowrap

package traced

//go:generate gowrap gen -p github.com/anza-labs/lke-operator/internal/lkeclient -i Client -t ../../../hack/templates/opentelemetry.go.tpl -o tracedclient.gen.go -l ""

import (
	"context"

	"github.com/anza-labs/lke-operator/internal/lkeclient"
	"github.com/linode/linodego"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// ClientWithTracing implements lkeclient.Client interface instrumented with opentracing spans
type ClientWithTracing struct {
	lkeclient.Client
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewClientWithTracing returns ClientWithTracing
func NewClientWithTracing(base lkeclient.Client, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ClientWithTracing {
	d := ClientWithTracing{
		Client:    base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// CreateLKECluster implements lkeclient.Client
func (_d ClientWithTracing) CreateLKECluster(ctx context.Context, opts linodego.LKEClusterCreateOptions) (lp1 *linodego.LKECluster, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.CreateLKECluster")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"opts": opts}, map[string]interface{}{
				"lp1": lp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.CreateLKECluster(ctx, opts)
}

// CreateLKENodePool implements lkeclient.Client
func (_d ClientWithTracing) CreateLKENodePool(ctx context.Context, clusterID int, opts linodego.LKENodePoolCreateOptions) (lp1 *linodego.LKENodePool, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.CreateLKENodePool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID,
				"opts":      opts}, map[string]interface{}{
				"lp1": lp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.CreateLKENodePool(ctx, clusterID, opts)
}

// DeleteLKECluster implements lkeclient.Client
func (_d ClientWithTracing) DeleteLKECluster(ctx context.Context, clusterID int) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.DeleteLKECluster")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.DeleteLKECluster(ctx, clusterID)
}

// DeleteLKENodePool implements lkeclient.Client
func (_d ClientWithTracing) DeleteLKENodePool(ctx context.Context, clusterID int, poolID int) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.DeleteLKENodePool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID,
				"poolID":    poolID}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.DeleteLKENodePool(ctx, clusterID, poolID)
}

// DeleteLKENodePoolNode implements lkeclient.Client
func (_d ClientWithTracing) DeleteLKENodePoolNode(ctx context.Context, clusterID int, nodeID string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.DeleteLKENodePoolNode")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID,
				"nodeID":    nodeID}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.DeleteLKENodePoolNode(ctx, clusterID, nodeID)
}

// GetLKECluster implements lkeclient.Client
func (_d ClientWithTracing) GetLKECluster(ctx context.Context, clusterID int) (lp1 *linodego.LKECluster, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.GetLKECluster")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID}, map[string]interface{}{
				"lp1": lp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.GetLKECluster(ctx, clusterID)
}

// GetLKEClusterDashboard implements lkeclient.Client
func (_d ClientWithTracing) GetLKEClusterDashboard(ctx context.Context, clusterID int) (lp1 *linodego.LKEClusterDashboard, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.GetLKEClusterDashboard")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID}, map[string]interface{}{
				"lp1": lp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.GetLKEClusterDashboard(ctx, clusterID)
}

// GetLKEClusterKubeconfig implements lkeclient.Client
func (_d ClientWithTracing) GetLKEClusterKubeconfig(ctx context.Context, clusterID int) (lp1 *linodego.LKEClusterKubeconfig, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.GetLKEClusterKubeconfig")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID}, map[string]interface{}{
				"lp1": lp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.GetLKEClusterKubeconfig(ctx, clusterID)
}

// ListLKEClusterAPIEndpoints implements lkeclient.Client
func (_d ClientWithTracing) ListLKEClusterAPIEndpoints(ctx context.Context, clusterID int, opts *linodego.ListOptions) (la1 []linodego.LKEClusterAPIEndpoint, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.ListLKEClusterAPIEndpoints")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID,
				"opts":      opts}, map[string]interface{}{
				"la1": la1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.ListLKEClusterAPIEndpoints(ctx, clusterID, opts)
}

// ListLKENodePools implements lkeclient.Client
func (_d ClientWithTracing) ListLKENodePools(ctx context.Context, clusterID int, opts *linodego.ListOptions) (la1 []linodego.LKENodePool, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.ListLKENodePools")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID,
				"opts":      opts}, map[string]interface{}{
				"la1": la1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.ListLKENodePools(ctx, clusterID, opts)
}

// ListLKEVersions implements lkeclient.Client
func (_d ClientWithTracing) ListLKEVersions(ctx context.Context, opts *linodego.ListOptions) (la1 []linodego.LKEVersion, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.ListLKEVersions")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"opts": opts}, map[string]interface{}{
				"la1": la1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.ListLKEVersions(ctx, opts)
}

// UpdateLKECluster implements lkeclient.Client
func (_d ClientWithTracing) UpdateLKECluster(ctx context.Context, clusterID int, opts linodego.LKEClusterUpdateOptions) (lp1 *linodego.LKECluster, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.UpdateLKECluster")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID,
				"opts":      opts}, map[string]interface{}{
				"lp1": lp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.UpdateLKECluster(ctx, clusterID, opts)
}

// UpdateLKENodePool implements lkeclient.Client
func (_d ClientWithTracing) UpdateLKENodePool(ctx context.Context, clusterID int, poolID int, opts linodego.LKENodePoolUpdateOptions) (lp1 *linodego.LKENodePool, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "lkeclient.Client.UpdateLKENodePool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"clusterID": clusterID,
				"poolID":    poolID,
				"opts":      opts}, map[string]interface{}{
				"lp1": lp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.UpdateLKENodePool(ctx, clusterID, poolID, opts)
}
