// Code generated by gowrap. DO NOT EDIT.
// template: ../../../hack/templates/opentelemetry.go.tpl
// gowrap: http://github.com/hexdigest/gowrap

package traced

//go:generate gowrap gen -p github.com/anza-labs/lke-operator/internal/k8s -i Client -t ../../../hack/templates/opentelemetry.go.tpl -o tracedclient.gen.go -l ""

import (
	"context"

	"github.com/anza-labs/lke-operator/internal/k8s"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// ClientWithTracing implements k8s.Client interface instrumented with opentracing spans
type ClientWithTracing struct {
	k8s.Client
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewClientWithTracing returns ClientWithTracing
func NewClientWithTracing(base k8s.Client, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ClientWithTracing {
	d := ClientWithTracing{
		Client:    base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Create implements k8s.Client
func (_d ClientWithTracing) Create(ctx context.Context, obj client.Object, opts ...client.CreateOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "k8s.Client.Create")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.Create(ctx, obj, opts...)
}

// Delete implements k8s.Client
func (_d ClientWithTracing) Delete(ctx context.Context, obj client.Object, opts ...client.DeleteOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "k8s.Client.Delete")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.Delete(ctx, obj, opts...)
}

// DeleteAllOf implements k8s.Client
func (_d ClientWithTracing) DeleteAllOf(ctx context.Context, obj client.Object, opts ...client.DeleteAllOfOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "k8s.Client.DeleteAllOf")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.DeleteAllOf(ctx, obj, opts...)
}

// Get implements k8s.Client
func (_d ClientWithTracing) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "k8s.Client.Get")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"key":  key,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.Get(ctx, key, obj, opts...)
}

// List implements k8s.Client
func (_d ClientWithTracing) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "k8s.Client.List")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"list": list,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.List(ctx, list, opts...)
}

// Patch implements k8s.Client
func (_d ClientWithTracing) Patch(ctx context.Context, obj client.Object, patch client.Patch, opts ...client.PatchOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "k8s.Client.Patch")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"obj":   obj,
				"patch": patch,
				"opts":  opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.Patch(ctx, obj, patch, opts...)
}

// Update implements k8s.Client
func (_d ClientWithTracing) Update(ctx context.Context, obj client.Object, opts ...client.UpdateOption) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "k8s.Client.Update")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Client.Update(ctx, obj, opts...)
}
